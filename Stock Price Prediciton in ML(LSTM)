import os
import numpy as np
import pandas as pd
import matplotlib.pylot as plt
#%matplotlib inline
#loading the Training Dataset
dataset_train = pd.read_csv("GOOGL.csv")
dataset_train.head()
#Open stock price column 
training_set = dataset_train.iloc[:1:2].values
print(training_set)
print(training_set.shape)
#normalizing the dataset
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0,1))
scaled_training_set =scaler.fit_transform(training_set)
scaled_training_set
#Creating X_train and Y_train Data Structures
x_train =[]
y_train = []
for i in range(60,1258):
    x_train.append(scaled_training_et[i-60:i,0])
    y_train.append(scaled_training_set[i,0])
x_train=np.array(x_train)
y_train=np.array(y_train)
print(x_train.shape)
print(y_train.shape)
#reshaping the Data
x_train = np.reshape(x_train.shape[0],x_train[1],1)
x_train.shape
#Building the model by importing the crucial libs and adding different layers to LSTM
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout

regressor = Sequential()
regressor.add(LSTM(units = 50, retun_sequences= True, input_shape =(x_train.shape[1],1)))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50, retun_sequences= True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50, retun_sequences= True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

regressor.add(Dense(units=1))

#Fitting the model
regressor.compile(optimizer ="adam",loss='mean_squared_error')
regressor.fit(x_train,y_train,epochs=100,batch_size=32)
#Extracting the actual stock prices of month
dataset_test = pd.read_csv("GOOGL.csv")
actual_stock_price = dataset_test.iloc[:,1:2].values
#preparing the input for the model
dataset_total = pd.concat((dataset_train['open']),axis=0)
inputs = dataset_total[len(dataset_total)-len(dataset_test)-60:].values

inputs = inputs.reshape(-1,1)
inputs = scaler.transfrorm(inputs)

x_test = []
for i in range(60,80):
    x_test.append[i-60:i,0]
x_test = np.array(x_test)
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
#predicting the values for month stock prices

predicted_stock_price = regressor.predict(x_test)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)
#plotting the actual and predicted prices for GStocks

plt.plot(acutal_stock_price ='red', label = 'Actual Google Stock Price')
plt.plot('predicted_stock price prediction')
plt.xlabel('time')
plt.ylabel('Google stock price')
plt.legend()

